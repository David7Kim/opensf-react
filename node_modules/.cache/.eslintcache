[{"D:\\reactProject\\opensales\\src\\index.js":"1","D:\\reactProject\\opensales\\src\\App.js":"2","D:\\reactProject\\opensales\\src\\reportWebVitals.js":"3","D:\\reactProject\\opensales\\src\\board\\PostList.js":"4","D:\\reactProject\\opensales\\src\\components\\ButtonInculde.js":"5","D:\\reactProject\\opensales\\src\\components\\CalendarDetailList.js":"6","D:\\reactProject\\opensales\\src\\components\\Search.js":"7","D:\\reactProject\\opensales\\src\\home\\Home.js":"8","D:\\reactProject\\opensales\\src\\components\\CalendarWritePop.js":"9","D:\\reactProject\\opensales\\src\\calendar\\Calendar.js":"10","D:\\reactProject\\opensales\\src\\calendar\\CalendarAddPop.js":"11","D:\\reactProject\\opensales\\src\\board\\Board.js":"12","D:\\reactProject\\opensales\\src\\board\\BoardAddPop.js":"13","D:\\reactProject\\opensales\\src\\login\\Login.js":"14","D:\\reactProject\\opensales\\src\\login\\FindAccount.js":"15","D:\\reactProject\\opensales\\src\\login\\Signup.js":"16","D:\\reactProject\\opensales\\src\\login\\FindPassword.js":"17","D:\\reactProject\\opensales\\src\\utils\\open-sf-utils.js":"18","D:\\reactProject\\opensales\\src\\calendar\\Header.js":"19","D:\\reactProject\\opensales\\src\\calendar\\CalendarApp.js":"20","D:\\reactProject\\opensales\\src\\board\\postBox.js":"21","D:\\reactProject\\opensales\\src\\board\\PostView.js":"22","D:\\reactProject\\opensales\\src\\login\\Setting.js":"23","D:\\reactProject\\opensales\\src\\calendar\\CalendarModifyPop.js":"24","D:\\reactProject\\opensales\\src\\board\\BoardHeader.js":"25","D:\\reactProject\\opensales\\src\\components\\Comments.js":"26","D:\\reactProject\\opensales\\src\\login\\SetAdmin.js":"27","D:\\reactProject\\opensales\\src\\login\\UserList .js":"28","D:\\reactProject\\opensales\\src\\board\\ScrollPaging.js":"29"},{"size":1757,"mtime":1669698015587,"results":"30","hashOfConfig":"31"},{"size":423,"mtime":1654852546221,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1653281471113,"results":"33","hashOfConfig":"31"},{"size":1491,"mtime":1669264676880,"results":"34","hashOfConfig":"31"},{"size":338,"mtime":1653639990021,"results":"35","hashOfConfig":"31"},{"size":1614,"mtime":1668130158219,"results":"36","hashOfConfig":"31"},{"size":637,"mtime":1653969807558,"results":"37","hashOfConfig":"31"},{"size":4470,"mtime":1669871322373,"results":"38","hashOfConfig":"31"},{"size":659,"mtime":1660092770955,"results":"39","hashOfConfig":"31"},{"size":4238,"mtime":1668063620254,"results":"40","hashOfConfig":"31"},{"size":7986,"mtime":1668063625788,"results":"41","hashOfConfig":"31"},{"size":3261,"mtime":1669861635044,"results":"42","hashOfConfig":"31"},{"size":3026,"mtime":1667349790112,"results":"43","hashOfConfig":"31"},{"size":3580,"mtime":1668070157853,"results":"44","hashOfConfig":"31"},{"size":1684,"mtime":1668063595225,"results":"45","hashOfConfig":"31"},{"size":6336,"mtime":1669699237315,"results":"46","hashOfConfig":"31"},{"size":1288,"mtime":1655361056274,"results":"47","hashOfConfig":"31"},{"size":1310,"mtime":1668390262133,"results":"48","hashOfConfig":"31"},{"size":704,"mtime":1658906451032,"results":"49","hashOfConfig":"31"},{"size":7038,"mtime":1668158285422,"results":"50","hashOfConfig":"31"},{"size":2415,"mtime":1668496869785,"results":"51","hashOfConfig":"31"},{"size":1711,"mtime":1668063666389,"results":"52","hashOfConfig":"31"},{"size":6277,"mtime":1668133695006,"results":"53","hashOfConfig":"31"},{"size":11817,"mtime":1668158334702,"results":"54","hashOfConfig":"31"},{"size":506,"mtime":1660190771247,"results":"55","hashOfConfig":"31"},{"size":370,"mtime":1668140392325,"results":"56","hashOfConfig":"31"},{"size":1963,"mtime":1668155593947,"results":"57","hashOfConfig":"31"},{"size":933,"mtime":1668148250730,"results":"58","hashOfConfig":"31"},{"size":1869,"mtime":1668405110416,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1iznilv",{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"67"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"67"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"67"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"67"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"67"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"67"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"67"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"67"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"67"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"67"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"67"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"67"},"D:\\reactProject\\opensales\\src\\index.js",["164"],[],"D:\\reactProject\\opensales\\src\\App.js",["165","166","167"],[],"// import logo from './logo.svg';\nimport \"./App.css\";\n// import  './components/Component.css';\n// import  './login/Login.css';\nimport \"./calendar/Calendar.css\";\nimport \"./home/Home.css\";\nimport \"./board/Board.css\";\nimport \"./board/PostList\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PostList from \"./board/PostList\";\n\nfunction App() {\n  return <div>hi</div>;\n}\n\nexport default App;\n",[],"D:\\reactProject\\opensales\\src\\reportWebVitals.js",[],[],"D:\\reactProject\\opensales\\src\\board\\PostList.js",[],[],"D:\\reactProject\\opensales\\src\\components\\ButtonInculde.js",["168"],[],"import React from 'react';\r\nimport './Component.css';\r\nclass ButtonAdd extends React.Component{\r\n    static defaultProps={\r\n        name :'추가'\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"btn_include\">\r\n                <a>{this.props.name}</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ButtonAdd;",[],"D:\\reactProject\\opensales\\src\\components\\CalendarDetailList.js",[],[],"D:\\reactProject\\opensales\\src\\components\\Search.js",[],[],[],"D:\\reactProject\\opensales\\src\\home\\Home.js",["169","170","171","172","173"],[],"D:\\reactProject\\opensales\\src\\components\\CalendarWritePop.js",["174","175"],[],"D:\\reactProject\\opensales\\src\\calendar\\Calendar.js",[],[],"D:\\reactProject\\opensales\\src\\calendar\\CalendarAddPop.js",["176"],[],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"./Calendar.css\";\r\n\r\nfunction CalendarAddPop({ closeAdd }) {\r\n  //Layout label 값\r\n  let defaultSettings = {\r\n    calTitle: \"일정등록\",\r\n    calConfirmBtn: \"확인\",\r\n    calScheduleTitle: \"일정명\",\r\n    startDateTitle: \"시작\",\r\n    endDateTitle: \"종료\",\r\n    attendenceTitle: \"참석자\",\r\n    display: \"false\",\r\n  };\r\n\r\n  //State 선언\r\n  const [userInfo, setUserInfo] = useState([]); //사용자 계정 정보\r\n  const [scheduleTitle, setScheduleTitle] = useState(\"\"); //스케줄 제목\r\n  const [startDate, setStartDate] = useState(moment().format(\"YYYY-MM-DD\")); //시작일자\r\n  const [startTime, setStartTime] = useState(moment().format(\"HH:mm\")); //시작시간\r\n  const [endDate, setEndDate] = useState(moment().format(\"YYYY-MM-DD\")); //종료일자\r\n  const [endTime, setEndTime] = useState(moment().format(\"HH:mm\")); //종료시간\r\n  const [attendence, setAttendence] = useState(\"\"); //참석자\r\n  const [contents, setContents] = useState(\"\"); //내용\r\n\r\n  const navigate = useNavigate();\r\n\r\n  //Input값 Change 이벤트 함수\r\n\r\n  //스케줄 제목 변경감지\r\n  const onChageSchedule = (e) => {\r\n    setScheduleTitle(e.currentTarget.value);\r\n  };\r\n  //스케줄 시작일자 변경감지\r\n  const onChageStartDate = (e) => {\r\n    if (startDate > endDate) {\r\n      setStartDate(moment().format(\"YYYY-MM-DD\"));\r\n    } else {\r\n      setStartDate(e.currentTarget.value);\r\n    }\r\n  };\r\n  //스케줄 시작시간 변경감지\r\n  const onChageStartTime = (e) => {\r\n    setStartTime(e.currentTarget.value);\r\n  };\r\n  //스케줄 종료일자 변경감지\r\n  const onChageEndDate = (e) => {\r\n    if (endDate < startDate) {\r\n      setEndDate(startDate);\r\n    } else {\r\n      setEndDate(e.currentTarget.value);\r\n    }\r\n  };\r\n  //스케줄 종료시간 변경감지\r\n  const onChageEndTime = (e) => {\r\n    setEndTime(e.currentTarget.value);\r\n  };\r\n  //스케줄 참석자 변경감지\r\n  const onChageAttendence = (e) => {\r\n    setAttendence(e.currentTarget.value);\r\n  };\r\n  //스케줄 내용 변경감지\r\n  const onChageContents = (e) => {\r\n    setContents(e.currentTarget.value);\r\n  };\r\n  //세션유저를 가져와 셋팅\r\n  useEffect(() => {\r\n    let url = \"/userinfo\";\r\n    const fetchData = async () => {\r\n      const result = await axios.get(url);\r\n      //사용자 정보가 없을경우 로그인 페이지로 이동\r\n      if (\r\n        result.data === \"\" ||\r\n        result.data.userProfileId.userAccount === \"\" ||\r\n        result.data.userProfileId.userAccount === undefined ||\r\n        result.length === 0\r\n      ) {\r\n        navigate(\"/login\");\r\n      } else {\r\n        //사용자 정보를 세팅\r\n\r\n        setUserInfo(result);\r\n        console.log(result);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  const addSchedule = () => {\r\n    let baseUrl = \"/calendar/add/schedule\";\r\n\r\n    //validate조건이 true일 경우에 axios통신을 한다.\r\n    // if (validate() == true) {\r\n    if (validate() === true) {\r\n      axios\r\n        .post(baseUrl, {\r\n          title: scheduleTitle, //스케줄 제목\r\n          contents: contents, //스케줄 내용\r\n          schedule_ownder: userInfo.data.userProfileId.userAccount, //스케줄 작성자 계정\r\n          userid: userInfo.data.userProfileId.id, //스케줄 작성자 id값\r\n          attendence: attendence, // 스케줄 참석자\r\n          startDate: startDate, // 스케줄 시작일자\r\n          startTime: startTime, // 스케줄 시작 시간\r\n          endDate: endDate, // 스케줄 종료일자\r\n          endTime: endTime, // 스케줄 종료시간\r\n        })\r\n        .then((resp) => {\r\n          if (resp.data === \"SUCCESS\") {\r\n            closeAdd();\r\n            //아닐 경우 Fail 리턴 , FailMessgae출력\r\n          } else if (resp.data === \"FAIL\") {\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  //일정등록시 필요한 Validate 함수\r\n  const validate = () => {\r\n    let codeType = true;\r\n    if (scheduleTitle === \"\") {\r\n      console.log(\"scheduleTitle 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (startDate === \"\") {\r\n      console.log(\"startDate 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (startTime === \"\") {\r\n      console.log(\"startTime 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (endDate === \"\") {\r\n      console.log(\"endDate 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (endTime === \"\") {\r\n      console.log(\"endTime 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (attendence === \"\") {\r\n      console.log(\"attendence 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (contents === \"\") {\r\n      console.log(\"contents 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    }\r\n    return codeType;\r\n  };\r\n\r\n  return (\r\n    <div className=\"add_box\">\r\n      <div className=\"calendar_add_box\">\r\n        <div className=\"cal_add_header\">\r\n          <div className=\"menu_bar\">\r\n            {/**캘린더 상단 제목, 취소,확인버튼 */}\r\n            <div className=\"cal_add_ico_cancel\" onClick={closeAdd}>\r\n              X\r\n            </div>\r\n            <div className=\"menu_title\">{defaultSettings.calTitle}</div>\r\n            <div className=\"cal_add_confirm_btn\" onClick={addSchedule}>\r\n              {defaultSettings.calConfirmBtn}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/**캘린더 바디 (제목,시작일자 ,종료일자 등) */}\r\n        <div className=\"cal_add_body\">\r\n          {/**캘린더 제목*/}\r\n          <div className=\"schedule_name\">\r\n            <div className=\"sch_title\">{defaultSettings.calScheduleTitle}</div>\r\n            <div className=\"sch_input_txt\">\r\n              <input name=\"scheduleTitle\" type=\"text\" onChange={onChageSchedule} value={scheduleTitle}></input>\r\n            </div>\r\n          </div>\r\n          {/**캘린더 시작일자*/}\r\n          <div className=\"shcedule_start\">\r\n            <div className=\"sch_st_title\">{defaultSettings.startDateTitle}</div>\r\n            <div className=\"start_date\">\r\n              <input name=\"startDate\" type=\"date\" onChange={onChageStartDate} value={startDate}></input>\r\n            </div>\r\n            {/**캘린더 시작시간*/}\r\n            <div className=\"start_time\">\r\n              <input name=\"startTime\" type=\"time\" onChange={onChageStartTime} value={startTime}></input>\r\n            </div>\r\n          </div>\r\n          {/**캘린더 종료일자*/}\r\n          <div className=\"shcedule_end\">\r\n            <div className=\"sch_ed_title\">{defaultSettings.endDateTitle}</div>\r\n            <div className=\"end_date\">\r\n              <input name=\"endDate\" type=\"date\" onChange={onChageEndDate} value={endDate} min={startDate} />\r\n            </div>\r\n            {/**캘린더 종료시간*/}\r\n            <div className=\"end_time\">\r\n              <input name=\"endTime\" type=\"time\" onChange={onChageEndTime} value={endTime} />\r\n            </div>\r\n          </div>\r\n          {/**캘린더 참석자*/}\r\n          <div className=\"shcedule_attendence\">\r\n            <div className=\"sch_atd_title\">{defaultSettings.attendenceTitle}</div>\r\n            <div className=\"attendence_name\">\r\n              <input name=\"attendence\" type=\"text\" onChange={onChageAttendence} value={attendence}></input>\r\n            </div>\r\n          </div>\r\n          {/**캘린더 내용*/}\r\n          <div className=\"shcedule_contents\">\r\n            <div className=\"shcedule_txtarea\">\r\n              <textarea name=\"contents\" placeholder=\"내용을 입력하세요.\" onChange={onChageContents} value={contents}></textarea>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CalendarAddPop;\r\n","D:\\reactProject\\opensales\\src\\board\\Board.js",["177"],[],"D:\\reactProject\\opensales\\src\\board\\BoardAddPop.js",["178","179"],[],"import React, { useState, useEffect } from \"react\";\r\nimport \"../calendar/Calendar.css\";\r\nimport \"./Board.css\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction BoardAddPop({ leftFunc, rightFunc }) {\r\n  const validate = () => {};\r\n  //const [title, setTitle] = useState(\"\"); //제목\r\n  const [contents, setContents] = useState(\"\"); //글내용\r\n  const [userInfo, setUserInfo] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  //세션 사용자 정보를 불러옵니다.\r\n  useEffect(() => {\r\n    let url = \"/userinfo\";\r\n    const fetchData = async () => {\r\n      const result = await axios.get(url);\r\n\r\n      if (\r\n        result.data.userProfileId.userAccount === \"\" ||\r\n        result.data.userProfileId.userAccount === undefined ||\r\n        result.length === 0\r\n      ) {\r\n        navigate(\"/login\");\r\n      } else {\r\n        setUserInfo(result);\r\n        console.log(result);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  //글내용 값 입력 이벤트\r\n  const onChangeContents = (e) => {\r\n    setContents(e.currentTarget.value);\r\n  };\r\n  const addPost = (e) => {\r\n    let baseUrl = \"/post/addPost\";\r\n    let date = new Date();\r\n    axios\r\n      .post(baseUrl, {\r\n        board_id: \"1\", //세션 게시판 아이디 받아와서 넣을예정\r\n        //title: title,\r\n        contents: contents,\r\n        writer: userInfo.data.userProfileId.userAccount,\r\n        created_date: date,\r\n        updated_date: date,\r\n      })\r\n      .then((resp) => {\r\n        console.log(resp);\r\n        if (resp.data === \"SUCCESS\") {\r\n          console.log(\"글 등록에 성공 하였습니다.\");\r\n          rightFunc();\r\n          //아닐 경우 Fail 리턴 , FailMessgae출력\r\n        } else if (resp.data === \"FAIL\") {\r\n          console.log(\"글 등록에 실패 하였습니다.\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        console.log(\"글 등록에 실패 하였습니다.\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"post_add_box\">\r\n      <div className=\"post_add_header\">\r\n        <div className=\"post_menu_bar\">\r\n          <div className=\"post_add_ico_cancel\" onClick={leftFunc}>\r\n            X\r\n          </div>\r\n          <div className=\"menu_title\">글등록</div>\r\n          <div className=\"post_add_confirm_btn\" onClick={addPost}>\r\n            확인\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"post_add_body\">\r\n        {/* <div className=\"post_title_input\">\r\n          <div className=\"post_title\">제목</div>\r\n          <div className=\"post_input_txt\">\r\n            <input type=\"text\" onChange={onChangeTitle} />\r\n          </div>\r\n        </div> */}\r\n        <div className=\"post_contents\">\r\n          <div className=\"post_txtarea\">\r\n            <textarea\r\n              placeholder=\"무슨 생각을 하고 계신가요?\"\r\n              onChange={onChangeContents}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default BoardAddPop;\r\n","D:\\reactProject\\opensales\\src\\login\\Login.js",[],[],"D:\\reactProject\\opensales\\src\\login\\FindAccount.js",[],[],"D:\\reactProject\\opensales\\src\\login\\Signup.js",["180","181","182"],[],"D:\\reactProject\\opensales\\src\\login\\FindPassword.js",[],[],"D:\\reactProject\\opensales\\src\\utils\\open-sf-utils.js",[],[],"D:\\reactProject\\opensales\\src\\calendar\\Header.js",["183","184"],[],"import React from \"react\";\r\nimport \"./Calendar.css\";\r\nexport default class Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header_box\">\r\n        <div\r\n          className=\"prevBtn\"\r\n          onClick={() => {\r\n            this.props.moveMonth(-1);\r\n          }}\r\n        >\r\n          <img src={require(\"../images/b_back-30.png\")} />\r\n        </div>\r\n        <div className=\"calendar_header\">{this.props.calendarMonth}</div>\r\n        <div\r\n          className=\"nextBtn\"\r\n          onClick={() => {\r\n            this.props.moveMonth(+1);\r\n          }}\r\n        >\r\n          <img src={require(\"../images/b_next-30.png\")} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","D:\\reactProject\\opensales\\src\\calendar\\CalendarApp.js",["185","186","187","188"],[],"import React from \"react\";\r\n\r\nimport moment from \"moment\";\r\nimport Header from \"./Header\";\r\nimport Calendar from \"./Calendar\";\r\nimport CalendarDetailList from \"../components/CalendarDetailList\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getUserSession } from \"../utils/open-sf-utils\";\r\nimport { getUserInfo } from \"../utils/open-sf-utils\";\r\nimport CalendarAddPop from \"../calendar/CalendarAddPop\";\r\nimport CalendarModifyPop from \"../calendar/CalendarModifyPop\";\r\n\r\nimport \"./Calendar.css\";\r\nimport axios from \"axios\";\r\n\r\nexport function withNavigation(Component) {\r\n  return (props) => <Component {...props} navigate={useNavigate()} />;\r\n}\r\n\r\nclass CalendarApp extends React.Component {\r\n  //Default state 설정\r\n  state = {\r\n    calendarMonth: moment(),\r\n    today: moment(),\r\n    selected: moment().format(\"YYYY-MM-DD\"),\r\n    selectedDate: moment().format(\"YYYY-MM-DD\"),\r\n    popupState: false,\r\n    detailState: false,\r\n    scheduleId: \"\",\r\n    scheduleUserId: \"\",\r\n  };\r\n\r\n  static defaultProps = {\r\n    clickFn: () => {},\r\n  };\r\n  componentDidMount() {\r\n    //렌더시 현재요일의 스케줄 리스트를 가져옵니다.\r\n    this.goToday();\r\n  }\r\n  //Calendar item Click시 날짜 변경\r\n  changeSelected = (clickedDate) => {\r\n    if (moment(clickedDate).isSame(this.state.selected, \"day\")) {\r\n      this.props.clickFn(clickedDate);\r\n\r\n      return;\r\n    }\r\n    //state setting\r\n    this.setState({\r\n      selected: clickedDate,\r\n      selectedDate: clickedDate,\r\n    });\r\n    //properties clickFn settings\r\n    this.props.clickFn(clickedDate);\r\n\r\n    if (moment(clickedDate).isBefore(this.state.calendarMonth, \"month\")) {\r\n      this.moveMonth(-1);\r\n    } else if (moment(clickedDate).isAfter(this.state.calendarMonth, \"month\")) {\r\n      this.moveMonth(1);\r\n    }\r\n    this.getSelectedDateList(clickedDate);\r\n  };\r\n  //캘린더 리스트를 가져옵니다\r\n  getSelectedDateList = (selectedDate) => {\r\n    let url = \"/calendar/list/\" + selectedDate;\r\n    axios.get(url, {}).then((res) => {\r\n      this.setState({ scheduleList: res.data });\r\n    });\r\n  };\r\n\r\n  //캘린더 날짜를 변경합니다.\r\n  moveMonth = (month) => {\r\n    this.setState({\r\n      calendarMonth: this.state.calendarMonth.add(month, \"M\"),\r\n      selected: this.state.calendarMonth.startOf(\"month\").format(\"YYYY-MM-DD\"),\r\n      selectedDate: this.state.calendarMonth.startOf(\"month\").format(\"YYYY-MM-DD\"),\r\n    });\r\n    this.getSelectedDateList(this.state.calendarMonth.format(\"YYYY-MM-DD\"));\r\n  };\r\n\r\n  //스케줄 일정 클릭시 팝업\r\n  // CalendarDetailList  -> calendarApp state값 넘겨주기\r\n  onSeeDetailPop = (e) => {\r\n    console.log(e.currentTarget);\r\n    this.state.detail = true;\r\n  };\r\n\r\n  //오늘 날짜로 이동\r\n  goToday = () => {\r\n    this.setState({\r\n      calendarMonth: moment(),\r\n      selected: moment().format(\"YYYY-MM-DD\"),\r\n      selectedDate: moment().format(\"YYYY-MM-DD\"),\r\n    });\r\n    this.getSelectedDateList(moment().format(\"YYYY-MM-DD\"));\r\n  };\r\n\r\n  //스케줄 아이디 설정\r\n  //일정 자세히 보기 (팝업)\r\n  goDetail = (sheculdeId, scheduleUserId) => {\r\n    this.setState({ detailState: true });\r\n    this.setState({ scheduleId: sheculdeId });\r\n    this.setState({ scheduleUserId: scheduleUserId });\r\n  };\r\n\r\n  //일정 보기 취소 (팝업 close)\r\n  closeDetail = () => {\r\n    this.setState({ detailState: false });\r\n  };\r\n\r\n  //메인 홈으로 이동\r\n  goHome = () => {\r\n    this.props.navigate(\"/home\");\r\n  };\r\n  goLogin = () => {\r\n    this.props.navigate(\"/login\");\r\n  };\r\n  //일정 추가 화면 이동\r\n  goAdd = () => {\r\n    this.setState({ popupState: true });\r\n  };\r\n\r\n  closeAdd = () => {\r\n    this.setState({ popupState: false });\r\n    //close 될때 뭔가 refresh 되긴 해야 하는데 팝업에서 등록후 realtime으로 get할수 있는게 필요함...\r\n    // this.props.navigate(\"/calendar\");\r\n    window.location.reload();\r\n  };\r\n  //setModifyData\r\n  setModify = (value) => {\r\n    this.setState({ modifyState: value });\r\n  };\r\n  render() {\r\n    //여기에서도 로그인 세션이 없을경우 로그인 페이지로 넘겨줘야함\r\n    // let userInfo = getUserSession();\r\n    // if (userInfo.userInfo.length === 0 || userInfo.userInfo.data === \"\") {\r\n    //   this.goLogin();\r\n    // }\r\n    return (\r\n      <div>\r\n        {/**캘린더 등록 버튼 클릭시 캘린더 팝업 보여줌*/}\r\n        {this.state.popupState === true && <CalendarAddPop closeAdd={this.closeAdd} />}\r\n        {/**캘린더 수정 버튼 클릭시 캘린더 팝업 보여줌*/}\r\n        {this.state.detailState === true && (\r\n          <CalendarModifyPop\r\n            detailState={this.state.detailState}\r\n            closeDetail={this.closeDetail}\r\n            scheduleId={this.state.scheduleId}\r\n            scheduleUserId={this.state.scheduleUserId}\r\n          />\r\n        )}\r\n        <div className=\"calendar_box\">\r\n          {/* <div className=\"calendar_box\" onLoad={this.goToday}> */}\r\n          {/**캘린더 상단 타이틀, 오늘버튼,홈버튼*/}\r\n          <div className=\"cal_header\">\r\n            <div className=\"menu_bar\">\r\n              <div className=\"btn_home\" onClick={this.goHome}>\r\n                <img src={require(\"../images/w_back-30.png\")}></img>\r\n              </div>\r\n              <div className=\"menu_title\">일정 목록</div>\r\n              <div className=\"menu_today\" onClick={this.goToday}>\r\n                오늘\r\n              </div>\r\n            </div>\r\n            {/**캘린더 현재월 표시*/}\r\n            <div className=\"cal_title\">\r\n              <Header\r\n                calendarMonth={this.state.calendarMonth.format(\"YYYY년 MM월\")}\r\n                today={this.state.today.format(\"YYYY-MM-DD\")}\r\n                moveMonth={this.moveMonth}\r\n              />\r\n            </div>\r\n            {/**캘린더 표시*/}\r\n            <Calendar YM={this.state.calendarMonth.format(\"YYYY-MM-DD\")} selected={this.state.selected} changeSelected={this.changeSelected} />\r\n          </div>\r\n          {/**캘린더 일정 리스트 표시*/}\r\n          <div className=\"cal_detail\">\r\n            <div className=\"cal_detail_title\">\r\n              <div className=\"selectedDate\">{this.state.selectedDate}</div>\r\n            </div>\r\n            <div className=\"cal_detail_contents\">\r\n              {this.state.scheduleList &&\r\n                this.state.scheduleList.map((schedule) => (\r\n                  <CalendarDetailList\r\n                    deleteState={this.deleteSchedule}\r\n                    goDetail={this.goDetail}\r\n                    schedule={schedule}\r\n                    modifyState={this.setModify}\r\n                    key={schedule.id}\r\n                  />\r\n                ))}\r\n            </div>\r\n          </div>\r\n          {/**캘린더 등록 버튼*/}\r\n          <div onClick={this.goAdd}>\r\n            <div className=\"addCalendar\">+</div>\r\n            {/*이미지 버튼으롤 변경 add.png */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withNavigation(CalendarApp);\r\n","D:\\reactProject\\opensales\\src\\board\\postBox.js",["189"],[],"import React from \"react\";\r\nimport moment from \"moment\";\r\nimport Comments from \"../components/Comments\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction PostBox({ live, postList, seedetail, goBack }) {\r\n  const [commentViewState, setCommentsViewState] = useState(false);\r\n  const [userPic, setUserPic] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  //세션에 User-account가 남아 있지 않다면 로그인 화면으로 이동\r\n  useEffect(() => {\r\n    let url = \"/user/info/\" + postList.userId.id;\r\n    const fetchData = async () => {\r\n      const result = await axios.get(url);\r\n      // 유저 정보가 존재하지 않을경우 로그인 페이지\r\n      if (result.data.userProfileId.userAccount === \"\" || result.data.userProfileId.userAccount === undefined || result.length === 0) {\r\n        navigate(\"/login\");\r\n      } else {\r\n        // 사용자 프로필 사진 설정\r\n        setUserPic(result.data.userProfilePicPath);\r\n        console.log(result);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  //댓글 창 state 변경 함수\r\n  const showCommentsView = () => {\r\n    if (commentViewState === true) {\r\n      setCommentsViewState(false);\r\n    } else {\r\n      setCommentsViewState(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"postList_box\"\r\n      data-postid={postList.id}\r\n      onClick={() => {\r\n        console.log(\"상세보기입니다.\");\r\n      }}\r\n      ref={live}\r\n    >\r\n      <div className=\"post_user_box\">\r\n        {/* 프로필 사진 , 이름 , 날짜 */}\r\n        <img className=\"post_user_pic\" src={process.env.PUBLIC_URL + userPic} alt=\"\"></img>\r\n        <div className=\"post_user_txt_box\">\r\n          <div className=\"post_user_name\">{postList.writer}</div>\r\n          <div className=\"post_date\">{moment(postList.updatedDate).format(\"YYYY년 MM월 DD일\")}</div>\r\n          <div className=\"post_title\">{postList.title}</div>\r\n        </div>\r\n        <div className=\"post_edit\">편집</div>\r\n      </div>\r\n      {/* 게시글 내용 */}\r\n      <div className=\"post_contents\">{postList.contents}</div>\r\n      {/* 댓글 */}\r\n      <div className=\"post_show_comments\" onClick={showCommentsView}>\r\n        댓글\r\n      </div>\r\n      {commentViewState !== false && <Comments placeholder=\"댓글을 입력하세요.\" />}\r\n    </div>\r\n  );\r\n}\r\nexport default PostBox;\r\n","D:\\reactProject\\opensales\\src\\board\\PostView.js",["190"],[],"import \"./Board.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport BoardHeader from \"../board/BoardHeader\";\r\nimport axios from \"axios\";\r\nfunction PostView() {\r\n  let defaultSettings = {\r\n    title: \"\",\r\n  };\r\n  const { state } = useLocation();\r\n  const [postView, setPostView] = useState([]);\r\n  //Propfile 사진 경로를 가져와서 넣어줍니다.\r\n  const getPostPicPath = (userId) => {\r\n    axios.get(\"/user/info/\" + userId).then((res) => {\r\n      return res.data;\r\n    });\r\n  };\r\n\r\n  //postId를 가져와서 데이터를 불러옵니다.\r\n  const getPost = () => {\r\n    let postid = state;\r\n    axios.get(\"/post/detail/view/\" + postid).then((res) => {\r\n      getPostPicPath();\r\n      setPostView(res.data);\r\n    });\r\n  };\r\n\r\n  useEffect(getPost, []);\r\n\r\n  return (\r\n    // 상단\r\n    <div className=\"postview_box\">\r\n      {/* <div className=\"postview_header\">\r\n        <div className=\"postview_menu\">\r\n          <div className=\"back_btn\">뒤로</div>\r\n          <div className=\"board_title\">Post</div>\r\n        </div>\r\n      </div> */}\r\n      <BoardHeader title={defaultSettings.title} />\r\n      {/* 내용 */}\r\n      <div className=\"post_detail_content_box\">\r\n        <div className=\"post_detail_post\">\r\n          <img className=\"post_profile_pic\" alt=\"\"></img>\r\n          <div className=\"post_writer\">{postView.writer}</div>\r\n          <div className=\"post_detail_content_title\">{postView.title}</div>\r\n          <div className=\"post_detail_content\">{postView.contents}</div>\r\n        </div>\r\n      </div>\r\n      {/* 주석 */}\r\n      <div className=\"post_detail_comment_box\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostView;\r\n","D:\\reactProject\\opensales\\src\\login\\Setting.js",["191","192","193"],[],"import { useState, useEffect, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport axios from \"axios\";\r\nfunction UpdateProfile() {\r\n  //각 input 등의 값을 state에 저장한다.\r\n  const [firstnm, setfirstnm] = useState(\"\");\r\n  const [lastnm, setlastnm] = useState(\"\");\r\n  const [email, setemail] = useState(\"\");\r\n  const [id, setid] = useState(\"\");\r\n  const [password, setpassword] = useState(\"\");\r\n  const [confirmpw, setconfirmpw] = useState(\"\");\r\n  const [prevPwCheck, setPrevPwCheck] = useState(\"\");\r\n  const [userInfo, setUserInfo] = useState([]);\r\n  const fileInput = useRef(null);\r\n  const [image, setImage] = useState(\"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png\");\r\n\r\n  //세션에 User-account가 남아 있지 않다면 로그인 화면으로 이동\r\n  useEffect(() => {\r\n    let url = \"/userinfo\";\r\n\r\n    const fetchData = async () => {\r\n      const result = await axios.get(url);\r\n      result.data.password = \"\";\r\n      //user정보, 이름 , 성 , 이메일 정보 등 셋팅\r\n      setUserInfo(result);\r\n      setImage(result.data.userProfilePicPath);\r\n      setfirstnm(result.data.userProfileId.firstName);\r\n      setlastnm(result.data.userProfileId.lastName);\r\n      setemail(result.data.userProfileId.email);\r\n      setid(result.data.userProfileId.userAccount);\r\n      //console.log(result);\r\n      if (result.data.userProfileId.userAccount === \"\" || result.data.userProfileId.userAccount === undefined || result.length === 0) {\r\n        // getUserInfo()\r\n        navigate(\"/login\");\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  //계정 만들기후 Navigate\r\n  const navigate = useNavigate(\"\");\r\n\r\n  //input의 State를 변경하는 함수 생성\r\n\r\n  //이메일 state 변경 이벤트\r\n  const onEmail = (e) => {\r\n    setemail(e.currentTarget.value);\r\n  };\r\n  //패스워드 state 변경 이벤트\r\n  const onPassword = (e) => {\r\n    setpassword(e.currentTarget.value);\r\n  };\r\n  //패스워드 확인 state 변경 이벤트\r\n  const onConfirmpw = (e) => {\r\n    setconfirmpw(e.currentTarget.value);\r\n  };\r\n  //이전 패스워드 확인 state 변경 이벤트\r\n  const onPrevPWCheck = (e) => {\r\n    setPrevPwCheck(e.currentTarget.value);\r\n    checkPrevPasswordCheck();\r\n  };\r\n\r\n  //Submit 시 Validate check 함수 (수정 필요 작동 안됨)\r\n  const validate = () => {\r\n    let result = false;\r\n    if (password !== confirmpw) {\r\n      alert(\"비밀번호가 같지 않습니다.\");\r\n      return result;\r\n    } else {\r\n      result = true;\r\n      return result;\r\n    }\r\n  };\r\n  const checkPrevPasswordCheck = (password) => {};\r\n  //계정 Insert(create) 함수\r\n  const updateUserAccount = () => {\r\n    //axios를 이용하여 api 호출\r\n    //일단은 Validate필요하기에 이부분 냅두기\r\n    let validateKey = validate();\r\n\r\n    if (validateKey) {\r\n      axios({\r\n        url: \"/regist/account/update\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        withCredentials: true,\r\n        method: \"POST\",\r\n        data: {\r\n          profile_pic: image,\r\n          user_account: userInfo.data.userProfileId.userAccount,\r\n          email: email,\r\n          password: password,\r\n        },\r\n      })\r\n        //계정 생성 성공 , 실패 조건\r\n        .then((res) => {\r\n          console.log(res);\r\n          navigate(\"/home\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n  const onImgChange = async (e) => {\r\n    if (e.target.files[0]) {\r\n      setImage(e.target.files[0]);\r\n    } else {\r\n      //업로드 취소할 시\r\n      setImage(\r\n        //임시로 사용중인 이미지 나중에 제거할 예정\r\n        \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png\"\r\n      );\r\n      return;\r\n    }\r\n    //화면에 프로필 사진 표시\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      if (reader.readyState === 2) {\r\n        setImage(reader.result);\r\n      }\r\n    };\r\n    reader.readAsDataURL(e.target.files[0]);\r\n  };\r\n  return (\r\n    <div className=\"signup_parent_box\">\r\n      <div className=\"signup_box\">\r\n        <div className=\"signup_box_tw\">\r\n          <div className=\"signup_title\">프로필 수정</div>\r\n          <div className=\"signup_input\">\r\n            <form>\r\n              <div className=\"signup_profile_pic\">\r\n                <img\r\n                  className=\"signup_img\"\r\n                  src={image}\r\n                  style={{ width: \"150px\", height: \"150px\" }}\r\n                  onClick={() => {\r\n                    fileInput.current.click();\r\n                  }}\r\n                  alt=\"\"\r\n                />\r\n                <input type=\"file\" accept=\"image/*\" style={{ display: \"none\" }} onChange={onImgChange} ref={fileInput} />\r\n              </div>\r\n              <div className=\"signup_name\">\r\n                <input type=\"text\" placeholder=\"성\" value={lastnm} readOnly />\r\n                <input type=\"text\" placeholder=\"이름\" value={firstnm} readOnly />\r\n              </div>\r\n              <div className=\"signup_email\">\r\n                <input type=\"email\" placeholder=\"이메일\" value={email} onChange={onEmail} />\r\n              </div>\r\n              <div className=\"signup_id\">\r\n                <input type=\"text\" placeholder=\"아이디\" value={id} readOnly />\r\n              </div>\r\n              {/* <div className=\"signup_password\">\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"이전 비밀번호 확인 \"\r\n                  onChange={onPrevPWCheck}\r\n                />\r\n              </div> */}\r\n              <div className=\"signup_password\">\r\n                <input type=\"password\" placeholder=\"패스워드\" onChange={onPassword} />\r\n              </div>\r\n              <div className=\"signup_confirm_pw\">\r\n                <input type=\"password\" placeholder=\"패스워드 확인\" onChange={onConfirmpw} />\r\n              </div>\r\n\r\n              <div className=\"signup_btn\">\r\n                <input type=\"button\" value=\"수정\" onClick={updateUserAccount} />\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default UpdateProfile;\r\n","D:\\reactProject\\opensales\\src\\calendar\\CalendarModifyPop.js",["194","195"],[],"import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"./Calendar.css\";\r\nimport { getUserSession } from \"../utils/open-sf-utils\";\r\n\r\nfunction CalendarModifyPop({ detailState, closeDetail, scheduleId, scheduleUserId }) {\r\n  //Layout label 값\r\n  let defaultSettings = {\r\n    calTitle: \"일정보기\",\r\n    calCancelBtn: \"취소\",\r\n    calModifyBtn: \"수정\",\r\n    calConfirmBtn: \"확인\",\r\n    calDeleteBtn: \"삭제\",\r\n    calScheduleTitle: \"일정명\",\r\n    startDateTitle: \"시작\",\r\n    endDateTitle: \"종료\",\r\n    attendenceTitle: \"참석자\",\r\n    detailState: detailState,\r\n    //CalendarApp => CalendarDetailList에서 보낸 props\r\n    scheduleId: scheduleId,\r\n    scheduleUserId: scheduleUserId,\r\n  };\r\n\r\n  /**\r\n   * 시작일자,종료일자,참석자,내용 State초기화\r\n   */\r\n  const [scheduleTitle, setScheduleTitle] = useState(\"\"); //스케줄 제목\r\n  const [startDate, setStartDate] = useState(moment().format(\"YYYY-MM-DD\")); //시작일\r\n  const [startTime, setStartTime] = useState(moment().format(\"HH:mm\")); //시작시간\r\n  const [endDate, setEndDate] = useState(moment().format(\"YYYY-MM-DD\")); //종료일\r\n  const [endTime, setEndTime] = useState(moment().format(\"HH:mm\")); //종료시간\r\n  const [attendence, setAttendence] = useState(\"\"); //참석자\r\n  const [contents, setContents] = useState(\"\"); //내용\r\n\r\n  const [readonly, setReadonly] = useState(true); //Readonly\r\n  const [editable, setEditable] = useState(false); //변경버튼\r\n  const [confirm, setConfirm] = useState(false); //확인버튼\r\n  const [modifyBtn, setModifyBtn] = useState(true); //수정 버튼\r\n  const [cancelBtn, setCancelBtn] = useState(false); //취소버튼\r\n  const navigate = useNavigate();\r\n\r\n  /**\r\n   * 시작일자,종료일자,참석자,내용의 값 변경 감지 함수\r\n   */\r\n  //제목 변경감지\r\n  const onChageSchedule = (e) => {\r\n    setScheduleTitle(e.currentTarget.value);\r\n  };\r\n  //시작일자 변경감지\r\n  const onChageStartDate = (e) => {\r\n    if (startDate > endDate) {\r\n      setStartDate(moment().format(\"YYYY-MM-DD\"));\r\n    } else {\r\n      setStartDate(e.currentTarget.value);\r\n    }\r\n  };\r\n  //시작시간 변경감지\r\n  const onChageStartTime = (e) => {\r\n    setStartTime(e.currentTarget.value);\r\n  };\r\n  //종료일자 변경감지\r\n  const onChageEndDate = (e) => {\r\n    if (endDate < startDate) {\r\n      setEndDate(startDate);\r\n    } else {\r\n      setEndDate(e.currentTarget.value);\r\n    }\r\n  };\r\n  //종료시간 변경감지\r\n  const onChageEndTime = (e) => {\r\n    setEndTime(e.currentTarget.value);\r\n  };\r\n  //참석자 변경감지\r\n  const onChageAttendence = (e) => {\r\n    setAttendence(e.currentTarget.value);\r\n  };\r\n  //내용 변경감지\r\n  const onChageContents = (e) => {\r\n    setContents(e.currentTarget.value);\r\n  };\r\n  //수정 버튼 클릭시 readonly 해제 , 확인버튼 표시\r\n  const readOnlyRelease = () => {\r\n    setReadonly(false);\r\n    setConfirm(true);\r\n    setModifyBtn(false);\r\n    setCancelBtn(true);\r\n  };\r\n  const readOnlyHold = () => {\r\n    setReadonly(true);\r\n    setConfirm(false);\r\n    setModifyBtn(true);\r\n    setCancelBtn(false);\r\n  };\r\n  /**\r\n   * 함수명: deleteSchedule\r\n   * 작성자: tykim\r\n   * 작성일 : 2022-10-26\r\n   * 내용 : scheduleId를 넘겨주어 scheduleDate를 삭제합니다.\r\n   * param : scheduleId\r\n   *\r\n   */\r\n  const deleteSchedule = () => {\r\n    let url = \"/calendar/delete/\";\r\n    axios\r\n      .delete(url, { data: { scheduleId: scheduleId } })\r\n      .then((resp) => {\r\n        console.log(\"일정을 삭제합니다.\", resp);\r\n        closeDetail();\r\n        window.location.reload();\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"일정 삭제를 실패했습니다.\", error);\r\n      });\r\n  };\r\n\r\n  /**\r\n   * 함수명:modifySchedule\r\n   * 작성자: tykim\r\n   * 작성일 : 2022-10-26\r\n   * 내용 : scheduleId와 RequestBody를 넘겨주어 scheduleData를 업데이트 합니다.\r\n   * param : scheduleData\r\n   */\r\n  const modifySchedule = (e) => {\r\n    let baseUrl = \"/calendar/modify/schedule\";\r\n\r\n    //validate조건이 true일 경우에 axios통신을 한다.\r\n\r\n    // if (validate() === true) {\r\n    axios\r\n      .post(baseUrl, {\r\n        id: defaultSettings.scheduleId, //스케줄 Id\r\n        title: scheduleTitle, //스케줄 제목\r\n        contents: contents, //스케줄 내용\r\n        attendence: attendence, //스케줄 참석자\r\n        startDate: startDate, //스케줄 시작일자\r\n        userid: defaultSettings.scheduleUserId, //스케줄 작성자 id값\r\n        startTime: startTime, // 스케줄 시작시간\r\n        endDate: endDate, // 스케줄 종료일자\r\n        endTime: endTime, // 스케줄 종료시간\r\n      })\r\n      .then((resp) => {\r\n        console.log(resp);\r\n\r\n        if (resp.data === \"SUCCESS\") {\r\n          console.log(\"스케줄 등록에 성공 하였습니다.\");\r\n          navigate(\"/Calendar\");\r\n\r\n          //아닐 경우 Fail 리턴 , FailMessgae출력\r\n        } else if (resp.data === \"FAIL\") {\r\n          console.log(\"스케줄 등록에 실패 하였습니다.\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    //팝업 close\r\n    closeDetail();\r\n    // }\r\n  };\r\n  /**\r\n   *\r\n   * 함수명 : validate\r\n   * 작성자 : tykim\r\n   * 내용 : 시작일,종료일,시간 등 값을 입력하지 않았을 경우\r\n   *        아래 Validate 함수를 실행합니다.\r\n   */\r\n  const validate = () => {\r\n    let codeType = true;\r\n    if (scheduleTitle === \"\") {\r\n      console.log(\"scheduleTitle 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (startDate === \"\") {\r\n      console.log(\"startDate 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (startTime === \"\") {\r\n      console.log(\"startTime 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (endDate === \"\") {\r\n      console.log(\"endDate 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (endTime === \"\") {\r\n      console.log(\"endTime 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (attendence === \"\") {\r\n      console.log(\"attendence 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    } else if (contents === \"\") {\r\n      console.log(\"contents 값을 입력 해주세요.\");\r\n      codeType = false;\r\n    }\r\n    return codeType;\r\n  };\r\n  /**\r\n   * 스케줄 클릭시 ScheduleId를 넘겨받아 schedule을 getData하여\r\n   * 수정 팝업 부분에 출력해줍니다.\r\n   */\r\n  useEffect(() => {\r\n    let url = \"/calendar/modify/schedule/\" + defaultSettings.scheduleId;\r\n    let sessionUser = getUserSession();\r\n\r\n    const fetchData = async () => {\r\n      const result = await axios.get(url);\r\n\r\n      //유저 정보가 존재하지 않을경우 로그인 페이지\r\n      if (\r\n        sessionUser.userInfo[0].data.userProfileId.id === \"\" ||\r\n        sessionUser.userInfo[0].data.userProfileId.id === undefined ||\r\n        sessionUser.userInfo[0].length === 0\r\n      ) {\r\n        navigate(\"/Login\");\r\n      }\r\n      //세션 유저 정보와 게시판 유저 정보와 같은 경우 editable true\r\n      if (result.data.id === \"\" || result.data.id === undefined) {\r\n        // closeDetail();\r\n      } else {\r\n        if (sessionUser.userInfo[0].data.userProfileId.id === defaultSettings.scheduleUserId) {\r\n          setEditable(true); //수정,삭제 버튼 조건\r\n        }\r\n        //제목,날짜, 시간 등에 불러온 값을 setting해줍니다.\r\n        setScheduleTitle(result.data.scheduleTitle);\r\n        setStartDate(moment(result.data.startDate).format(\"YYYY-MM-DD\"));\r\n        setStartTime(result.data.startTime);\r\n        setEndDate(moment(result.data.endDate).format(\"YYYY-MM-DD\"));\r\n        setEndTime(result.data.endTime);\r\n        setAttendence(result.data.attendence);\r\n        setContents(result.data.contents);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return (\r\n    <div className=\"modify_box\">\r\n      <div className=\"calendar_modify_box\">\r\n        {/** 스케줄 상단 제목표기,취소,확인 버튼 영역*/}\r\n        <div className=\"cal_add_header\">\r\n          <div className=\"menu_bar\">\r\n            <div className=\"cal_add_ico_cancel\" onClick={closeDetail}>\r\n              X\r\n            </div>\r\n            <div className=\"menu_title\">{defaultSettings.calTitle}</div>\r\n            {confirm && (\r\n              <div className=\"cal_add_confirm_btn\" onClick={modifySchedule}>\r\n                {defaultSettings.calConfirmBtn}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"cal_add_body\">\r\n          {/** 스케줄 제목 input 영역*/}\r\n          <div className=\"schedule_name\">\r\n            <div className=\"sch_title\">{defaultSettings.calScheduleTitle}</div>\r\n            <div className=\"sch_input_txt\">\r\n              <input name=\"scheduleTitle\" type=\"text\" onChange={onChageSchedule} value={scheduleTitle} readOnly={readonly}></input>\r\n            </div>\r\n          </div>\r\n          {/** 스케줄 시작일자,시간 input 영역*/}\r\n          <div className=\"shcedule_start\">\r\n            <div className=\"sch_st_title\">{defaultSettings.startDateTitle}</div>\r\n            <div className=\"start_date\">\r\n              <input name=\"startDate\" type=\"date\" onChange={onChageStartDate} value={startDate} readOnly={readonly}></input>\r\n            </div>\r\n            <div className=\"start_time\">\r\n              <input name=\"startTime\" type=\"time\" onChange={onChageStartTime} value={startTime} readOnly={readonly}></input>\r\n            </div>\r\n          </div>\r\n          {/** 스케줄 종료일자,시간 input 영역*/}\r\n          <div className=\"shcedule_end\">\r\n            <div className=\"sch_ed_title\">{defaultSettings.endDateTitle}</div>\r\n            <div className=\"end_date\">\r\n              <input name=\"endDate\" type=\"date\" onChange={onChageEndDate} value={endDate} min={startDate} readOnly={readonly} />\r\n            </div>\r\n            <div className=\"end_time\">\r\n              <input name=\"endTime\" type=\"time\" onChange={onChageEndTime} value={endTime} readOnly={readonly} />\r\n            </div>\r\n          </div>\r\n          {/** 스케줄 참석자 input 영역*/}\r\n          <div className=\"shcedule_attendence\">\r\n            <div className=\"sch_atd_title\">{defaultSettings.attendenceTitle}</div>\r\n            <div className=\"attendence_name\">\r\n              <input name=\"attendence\" type=\"text\" onChange={onChageAttendence} value={attendence} readOnly={readonly}></input>\r\n            </div>\r\n          </div>\r\n          {/** 스케줄 내용 input 영역*/}\r\n          <div className=\"shcedule_contents\">\r\n            <div className=\"shcedule_txtarea\">\r\n              <textarea name=\"contents\" placeholder=\"내용을 입력하세요.\" onChange={onChageContents} value={contents} readOnly={readonly}></textarea>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {/** 수정,삭제 버튼 영역*/}\r\n        {editable && (\r\n          <div className=\"editable_box\">\r\n            {modifyBtn && (\r\n              <div className=\"editable_btn\" onClick={readOnlyRelease}>\r\n                <div>{defaultSettings.calModifyBtn}</div>\r\n              </div>\r\n            )}\r\n            {cancelBtn && (\r\n              <div className=\"editable_btn\" onClick={readOnlyHold}>\r\n                <div>{defaultSettings.calCancelBtn}</div>\r\n              </div>\r\n            )}\r\n            <div className=\"editable_btn\" onClick={deleteSchedule}>\r\n              <div>{defaultSettings.calDeleteBtn}</div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CalendarModifyPop;\r\n","D:\\reactProject\\opensales\\src\\board\\BoardHeader.js",["196","197"],[],"function BoardHeader({ leftFunc, rightFunc, title, option, className }) {\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"board_m_prev_btn\" onClick={leftFunc}>\r\n        <img src={require(\"../images/b_back-30.png\")} />\r\n      </div>\r\n      <div className=\"board_m_txt\">{title}</div>\r\n      <div className=\"btn_add_post\" onClick={rightFunc}>\r\n        {option === true && <img src={require(\"../images/b-pencil-24.png\")} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default BoardHeader;\r\n","D:\\reactProject\\opensales\\src\\components\\Comments.js",[],[],"D:\\reactProject\\opensales\\src\\login\\SetAdmin.js",["198"],[],"import { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport UserList from \"./UserList \";\r\nimport \"./Login.css\";\r\nimport axios from \"axios\";\r\n\r\nfunction SetAdmin() {\r\n  const navigate = useNavigate();\r\n  const [userList, setUserList] = useState([]);\r\n  useEffect(() => {\r\n    let url = \"/user/infoes\";\r\n    const fetchData = async () => {\r\n      const result = await axios.get(url);\r\n      //유저 정보가 존재하지 않을경우 로그인 페이지\r\n      //   if (\r\n      //     result.data === \"\" ||\r\n      //     result.data.userProfileId.userAccount === \"\" ||\r\n      //     result.data.userProfileId.userAccount === undefined ||\r\n      //     result.length === 0\r\n      //   ) {\r\n      //     navigate(\"/login\");\r\n      //   } else {\r\n      //     setUserList();\r\n      console.log(result);\r\n      setUserList(result.data);\r\n\r\n      //   }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  //전체선택\r\n  const checkAll = (e) => {\r\n    console.log(e);\r\n  };\r\n\r\n  //메인 홈으로 이동\r\n  const goHome = () => {\r\n    navigate(\"/home\");\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"set_admin_box\">\r\n        <div className=\"set_admin_top\">\r\n          <div className=\"go_home\" onClick={goHome}>\r\n            <img src={require(\"../images/w_back-30.png\")}></img>\r\n          </div>\r\n          <div className=\"set_admin_title\">관리자 설정</div>\r\n        </div>\r\n        <div className=\"set_admin_header_box\">\r\n          <div className=\"set_admin_state_box\">\r\n            <div className=\"chk_all\" onClick={checkAll}>\r\n              전체선택\r\n            </div>\r\n            <div className=\"btn_admin\">관리자 설정</div>\r\n          </div>\r\n          {/* 사용자 목록 가져와서 출력합니다. */}\r\n          {userList.length !== 0 ? userList.map((user) => <UserList userInfo={user} key={`user_id-${user.id}`} />) : \"\"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default SetAdmin;\r\n","D:\\reactProject\\opensales\\src\\login\\UserList .js",["199","200","201","202","203"],[],"import { useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction UserList(userInfo) {\r\n  const navigate = useNavigate();\r\n  const setAdmin = (target) => {};\r\n  return (\r\n    <div className=\"set_admin_user_box\">\r\n      {/* 체크 박스 */}\r\n      <div className=\"chk_user_list_box\">\r\n        <input className=\"chk_user_list\" type=\"checkbox\"></input>\r\n      </div>\r\n      {/* 프로필 사진 */}\r\n      <div className=\"set_admin_user_pic_box\">\r\n        <img className=\"user_pic\" src={process.env.PUBLIC_URL + userInfo.userInfo.userProfilePicPath} alt=\"\"></img>\r\n      </div>\r\n      {/* 이름 */}\r\n      <div className=\"user_name\">{userInfo.userInfo.userProfileId.userName}</div>\r\n      {/* 권한 */}\r\n      <div className=\"user_is_admin_box\">{userInfo.userInfo.userIsAdmin !== null ? \"관리자\" : \"일반\"}</div>\r\n    </div>\r\n  );\r\n}\r\nexport default UserList;\r\n","D:\\reactProject\\opensales\\src\\board\\ScrollPaging.js",["204","205","206","207"],[],"import { useState, useEffect } from \"react\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// type RandomImageType = {\r\n//   id: string;\r\n//   author: string;\r\n//   width: number;\r\n//   height: number;\r\n//   url: string;\r\n//   download_url: string;\r\n// };\r\nexport default function ScrollPaging() {\r\n  const [randomImageList, setRandomImageList] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n\r\n  const handleScroll = () => {\r\n    const scrollHeight = document.documentElement.scrollHeight;\r\n    const scrollTop = document.documentElement.scrollTop;\r\n    const clientHeight = document.documentElement.clientHeight;\r\n\r\n    console.log(\"스크롤 이벤트 발생\");\r\n\r\n    if (scrollTop + clientHeight >= scrollHeight) {\r\n      console.log(\"페이지 끝에 스크롤이 닿았음\");\r\n      setPage((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  const getRandomImageThenSet = async () => {\r\n    console.log(\"fetching 함수 호출됨\");\r\n    try {\r\n      // const { data } = await axios.get(`https://picsum.photos/v2/list?page=${page}&limit=7`);\r\n      const result = await axios.get(`chatter/post?page=${page}&size=5`).then((res) => {\r\n        console.log(res);\r\n      });\r\n      // setRandomImageList(randomImageList.concat(data));\r\n    } catch {\r\n      console.error(\"fetching error\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"page ? \", page);\r\n    getRandomImageThenSet();\r\n  }, [page]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/* {randomImageList?.map((randomImage) => (\r\n        <img key={randomImage.id} src={randomImage.download_url} alt=\"random\" />\r\n      ))} */}\r\n    </>\r\n  );\r\n}\r\n\r\n/*-------------------------스크롤 페이징 구현부분 - ------------------*/\r\n",{"ruleId":"208","severity":1,"message":"209","line":4,"column":8,"nodeType":"210","messageId":"211","endLine":4,"endColumn":11},{"ruleId":"208","severity":1,"message":"212","line":9,"column":10,"nodeType":"210","messageId":"211","endLine":9,"endColumn":18},{"ruleId":"208","severity":1,"message":"213","line":10,"column":10,"nodeType":"210","messageId":"211","endLine":10,"endColumn":14},{"ruleId":"208","severity":1,"message":"214","line":11,"column":8,"nodeType":"210","messageId":"211","endLine":11,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":10,"column":17,"nodeType":"217","endLine":10,"endColumn":20},{"ruleId":"218","severity":1,"message":"219","line":61,"column":6,"nodeType":"220","endLine":61,"endColumn":8,"suggestions":"221"},{"ruleId":"222","severity":1,"message":"223","line":91,"column":23,"nodeType":"217","endLine":91,"endColumn":72},{"ruleId":"222","severity":1,"message":"223","line":98,"column":23,"nodeType":"217","endLine":98,"endColumn":69},{"ruleId":"222","severity":1,"message":"223","line":106,"column":25,"nodeType":"217","endLine":106,"endColumn":71},{"ruleId":"222","severity":1,"message":"223","line":114,"column":25,"nodeType":"217","endLine":114,"endColumn":71},{"ruleId":"215","severity":1,"message":"216","line":14,"column":13,"nodeType":"217","endLine":14,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":17,"column":13,"nodeType":"217","endLine":17,"endColumn":16},{"ruleId":"218","severity":1,"message":"219","line":91,"column":6,"nodeType":"220","endLine":91,"endColumn":8,"suggestions":"224"},{"ruleId":"208","severity":1,"message":"225","line":1,"column":51,"nodeType":"210","messageId":"211","endLine":1,"endColumn":57},{"ruleId":"208","severity":1,"message":"226","line":8,"column":9,"nodeType":"210","messageId":"211","endLine":8,"endColumn":17},{"ruleId":"218","severity":1,"message":"219","line":32,"column":6,"nodeType":"220","endLine":32,"endColumn":8,"suggestions":"227"},{"ruleId":"208","severity":1,"message":"226","line":48,"column":9,"nodeType":"210","messageId":"211","endLine":48,"endColumn":17},{"ruleId":"208","severity":1,"message":"228","line":50,"column":11,"nodeType":"210","messageId":"211","endLine":50,"endColumn":16},{"ruleId":"229","severity":1,"message":"230","line":70,"column":7,"nodeType":"210","messageId":"231","endLine":70,"endColumn":13},{"ruleId":"222","severity":1,"message":"223","line":13,"column":11,"nodeType":"217","endLine":13,"endColumn":59},{"ruleId":"222","severity":1,"message":"223","line":22,"column":11,"nodeType":"217","endLine":22,"endColumn":59},{"ruleId":"208","severity":1,"message":"232","line":8,"column":10,"nodeType":"210","messageId":"211","endLine":8,"endColumn":24},{"ruleId":"208","severity":1,"message":"233","line":9,"column":10,"nodeType":"210","messageId":"211","endLine":9,"endColumn":21},{"ruleId":"234","severity":1,"message":"235","line":84,"column":5,"nodeType":"236","messageId":"237","endLine":84,"endColumn":15},{"ruleId":"222","severity":1,"message":"223","line":157,"column":17,"nodeType":"217","endLine":157,"endColumn":63},{"ruleId":"218","severity":1,"message":"238","line":28,"column":6,"nodeType":"220","endLine":28,"endColumn":8,"suggestions":"239"},{"ruleId":"218","severity":1,"message":"240","line":28,"column":22,"nodeType":"220","endLine":28,"endColumn":24,"suggestions":"241"},{"ruleId":"208","severity":1,"message":"242","line":13,"column":10,"nodeType":"210","messageId":"211","endLine":13,"endColumn":21},{"ruleId":"218","severity":1,"message":"219","line":39,"column":6,"nodeType":"220","endLine":39,"endColumn":8,"suggestions":"243"},{"ruleId":"208","severity":1,"message":"244","line":59,"column":9,"nodeType":"210","messageId":"211","endLine":59,"endColumn":22},{"ruleId":"208","severity":1,"message":"226","line":170,"column":9,"nodeType":"210","messageId":"211","endLine":170,"endColumn":17},{"ruleId":"218","severity":1,"message":"245","line":233,"column":6,"nodeType":"220","endLine":233,"endColumn":8,"suggestions":"246"},{"ruleId":"222","severity":1,"message":"223","line":5,"column":9,"nodeType":"217","endLine":5,"endColumn":57},{"ruleId":"222","severity":1,"message":"223","line":9,"column":29,"nodeType":"217","endLine":9,"endColumn":79},{"ruleId":"222","severity":1,"message":"223","line":45,"column":13,"nodeType":"217","endLine":45,"endColumn":59},{"ruleId":"208","severity":1,"message":"247","line":2,"column":10,"nodeType":"210","messageId":"211","endLine":2,"endColumn":19},{"ruleId":"208","severity":1,"message":"212","line":2,"column":21,"nodeType":"210","messageId":"211","endLine":2,"endColumn":29},{"ruleId":"208","severity":1,"message":"248","line":3,"column":8,"nodeType":"210","messageId":"211","endLine":3,"endColumn":13},{"ruleId":"208","severity":1,"message":"249","line":6,"column":9,"nodeType":"210","messageId":"211","endLine":6,"endColumn":17},{"ruleId":"208","severity":1,"message":"250","line":7,"column":9,"nodeType":"210","messageId":"211","endLine":7,"endColumn":17},{"ruleId":"208","severity":1,"message":"251","line":14,"column":10,"nodeType":"210","messageId":"211","endLine":14,"endColumn":25},{"ruleId":"208","severity":1,"message":"252","line":14,"column":27,"nodeType":"210","messageId":"211","endLine":14,"endColumn":45},{"ruleId":"208","severity":1,"message":"253","line":34,"column":13,"nodeType":"210","messageId":"211","endLine":34,"endColumn":19},{"ruleId":"218","severity":1,"message":"254","line":46,"column":6,"nodeType":"220","endLine":46,"endColumn":12,"suggestions":"255"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Link' is defined but never used.","'PostList' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["256"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["257"],"'useRef' is defined but never used.","'validate' is assigned a value but never used.",["258"],"'regex' is assigned a value but never used.","no-const-assign","'result' is constant.","const","'getUserSession' is defined but never used.","'getUserInfo' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","React Hook useEffect has missing dependencies: 'navigate' and 'postList.userId.id'. Either include them or remove the dependency array.",["259"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["260"],"'prevPwCheck' is assigned a value but never used.",["261"],"'onPrevPWCheck' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'defaultSettings.scheduleId', 'defaultSettings.scheduleUserId', and 'navigate'. Either include them or remove the dependency array.",["262"],"'useEffect' is defined but never used.","'axios' is defined but never used.","'navigate' is assigned a value but never used.","'setAdmin' is assigned a value but never used.","'randomImageList' is assigned a value but never used.","'setRandomImageList' is assigned a value but never used.","'result' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getRandomImageThenSet'. Either include it or remove the dependency array.",["263"],{"desc":"264","fix":"265"},{"desc":"264","fix":"266"},{"desc":"264","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"264","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},"Update the dependencies array to be: [navigate]",{"range":"277","text":"278"},{"range":"279","text":"278"},{"range":"280","text":"278"},"Update the dependencies array to be: [navigate, postList.userId.id]",{"range":"281","text":"282"},"Update the dependencies array to be: [state]",{"range":"283","text":"284"},{"range":"285","text":"278"},"Update the dependencies array to be: [defaultSettings.scheduleId, defaultSettings.scheduleUserId, navigate]",{"range":"286","text":"287"},"Update the dependencies array to be: [getRandomImageThenSet, page]",{"range":"288","text":"289"},[1501,1503],"[navigate]",[2598,2600],[934,936],[1007,1009],"[navigate, postList.userId.id]",[765,767],"[state]",[1534,1536],[7001,7003],"[defaultSettings.scheduleId, defaultSettings.scheduleUserId, navigate]",[1359,1365],"[getRandomImageThenSet, page]"]