{"ast":null,"code":"var $ = require('../internals/export');\n\nvar global = require('../internals/global');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\nvar RangeError = global.RangeError;\nvar fromCharCode = String.fromCharCode; // eslint-disable-next-line es-x/no-string-fromcodepoint -- required for testing\n\nvar $fromCodePoint = String.fromCodePoint;\nvar join = uncurryThis([].join); // length should be 1, old FF problem\n\nvar INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1; // `String.fromCodePoint` method\n// https://tc39.es/ecma262/#sec-string.fromcodepoint\n\n$({\n  target: 'String',\n  stat: true,\n  arity: 1,\n  forced: INCORRECT_LENGTH\n}, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  fromCodePoint: function fromCodePoint(x) {\n    var elements = [];\n    var length = arguments.length;\n    var i = 0;\n    var code;\n\n    while (length > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');\n      elements[i] = code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);\n    }\n\n    return join(elements, '');\n  }\n});","map":{"version":3,"names":["$","require","global","uncurryThis","toAbsoluteIndex","RangeError","fromCharCode","String","$fromCodePoint","fromCodePoint","join","INCORRECT_LENGTH","length","target","stat","arity","forced","x","elements","arguments","i","code"],"sources":["D:/reactProject/opensales/node_modules/core-js/modules/es.string.from-code-point.js"],"sourcesContent":["var $ = require('../internals/export');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\nvar RangeError = global.RangeError;\nvar fromCharCode = String.fromCharCode;\n// eslint-disable-next-line es-x/no-string-fromcodepoint -- required for testing\nvar $fromCodePoint = String.fromCodePoint;\nvar join = uncurryThis([].join);\n\n// length should be 1, old FF problem\nvar INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;\n\n// `String.fromCodePoint` method\n// https://tc39.es/ecma262/#sec-string.fromcodepoint\n$({ target: 'String', stat: true, arity: 1, forced: INCORRECT_LENGTH }, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  fromCodePoint: function fromCodePoint(x) {\n    var elements = [];\n    var length = arguments.length;\n    var i = 0;\n    var code;\n    while (length > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');\n      elements[i] = code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);\n    } return join(elements, '');\n  }\n});\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,oCAAD,CAAzB;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,gCAAD,CAA7B;;AAEA,IAAII,UAAU,GAAGH,MAAM,CAACG,UAAxB;AACA,IAAIC,YAAY,GAAGC,MAAM,CAACD,YAA1B,C,CACA;;AACA,IAAIE,cAAc,GAAGD,MAAM,CAACE,aAA5B;AACA,IAAIC,IAAI,GAAGP,WAAW,CAAC,GAAGO,IAAJ,CAAtB,C,CAEA;;AACA,IAAIC,gBAAgB,GAAG,CAAC,CAACH,cAAF,IAAoBA,cAAc,CAACI,MAAf,IAAyB,CAApE,C,CAEA;AACA;;AACAZ,CAAC,CAAC;EAAEa,MAAM,EAAE,QAAV;EAAoBC,IAAI,EAAE,IAA1B;EAAgCC,KAAK,EAAE,CAAvC;EAA0CC,MAAM,EAAEL;AAAlD,CAAD,EAAuE;EACtE;EACAF,aAAa,EAAE,SAASA,aAAT,CAAuBQ,CAAvB,EAA0B;IACvC,IAAIC,QAAQ,GAAG,EAAf;IACA,IAAIN,MAAM,GAAGO,SAAS,CAACP,MAAvB;IACA,IAAIQ,CAAC,GAAG,CAAR;IACA,IAAIC,IAAJ;;IACA,OAAOT,MAAM,GAAGQ,CAAhB,EAAmB;MACjBC,IAAI,GAAG,CAACF,SAAS,CAACC,CAAC,EAAF,CAAjB;MACA,IAAIhB,eAAe,CAACiB,IAAD,EAAO,QAAP,CAAf,KAAoCA,IAAxC,EAA8C,MAAMhB,UAAU,CAACgB,IAAI,GAAG,4BAAR,CAAhB;MAC9CH,QAAQ,CAACE,CAAD,CAAR,GAAcC,IAAI,GAAG,OAAP,GACVf,YAAY,CAACe,IAAD,CADF,GAEVf,YAAY,CAAC,CAAC,CAACe,IAAI,IAAI,OAAT,KAAqB,EAAtB,IAA4B,MAA7B,EAAqCA,IAAI,GAAG,KAAP,GAAe,MAApD,CAFhB;IAGD;;IAAC,OAAOX,IAAI,CAACQ,QAAD,EAAW,EAAX,CAAX;EACH;AAdqE,CAAvE,CAAD"},"metadata":{},"sourceType":"script"}